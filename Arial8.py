# Code generated by font_to_py.py.
# Font: Arial.ttf Char set:  %.0123456789:CEHLMOPTahlux°
# Cmd: font_to_py.py -x Arial.ttf 8 Arial.py -c 0123456789LPCOMETHluxhPa:% °.
version = '0.33'

def height():
    return 8

def baseline():
    return 8

def max_width():
    return 10

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 32

def max_ch():
    return 176

_font =\
b'\x06\x00\x70\x88\x08\x10\x20\x20\x00\x20\x03\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x0a\x00\x62\x00\x94\x00\x94\x00\x68\x00\x0b\x00'\
b'\x14\x80\x14\x80\x23\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x40'\
b'\x06\x00\x70\x88\x88\x88\x88\x88\x88\x70\x06\x00\x20\x60\xa0\x20'\
b'\x20\x20\x20\x20\x06\x00\x70\x88\x08\x08\x10\x20\x40\xf8\x06\x00'\
b'\x70\x88\x08\x30\x08\x08\x88\x70\x06\x00\x10\x30\x50\x50\x90\xf8'\
b'\x10\x10\x06\x00\x78\x40\x80\xf0\x08\x08\x88\x70\x06\x00\x70\x88'\
b'\x80\xf0\x88\x88\x88\x70\x06\x00\xf8\x10\x10\x20\x20\x40\x40\x40'\
b'\x06\x00\x70\x88\x88\x70\x88\x88\x88\x70\x06\x00\x70\x88\x88\x88'\
b'\x78\x08\x88\x70\x03\x00\x00\x00\x80\x00\x00\x00\x00\x80\x06\x00'\
b'\x70\x88\x08\x10\x20\x20\x00\x20\x07\x00\x38\x44\x80\x80\x80\x80'\
b'\x44\x38\x06\x00\xf8\x80\x80\xf8\x80\x80\x80\xf8\x07\x00\x84\x84'\
b'\x84\xfc\x84\x84\x84\x84\x06\x00\x80\x80\x80\x80\x80\x80\x80\xf8'\
b'\x08\x00\x82\xc6\xc6\xaa\xaa\xaa\x92\x92\x08\x00\x38\x44\x82\x82'\
b'\x82\x82\x44\x38\x06\x00\xf0\x88\x88\x88\xf0\x80\x80\x80\x06\x00'\
b'\xf8\x20\x20\x20\x20\x20\x20\x20\x06\x00\x00\x00\x70\x88\x78\x88'\
b'\x98\xe8\x06\x00\x80\x80\xb0\xc8\x88\x88\x88\x88\x02\x00\x80\x80'\
b'\x80\x80\x80\x80\x80\x80\x06\x00\x00\x00\x88\x88\x88\x88\x98\x68'\
b'\x06\x00\x00\x00\x88\x50\x20\x20\x50\x88\x04\x00\xe0\xa0\xe0\x00'\
b'\x00\x00\x00\x00'

_sparse =\
b'\x20\x00\x0a\x00\x25\x00\x14\x00\x2e\x00\x26\x00\x30\x00\x30\x00'\
b'\x31\x00\x3a\x00\x32\x00\x44\x00\x33\x00\x4e\x00\x34\x00\x58\x00'\
b'\x35\x00\x62\x00\x36\x00\x6c\x00\x37\x00\x76\x00\x38\x00\x80\x00'\
b'\x39\x00\x8a\x00\x3a\x00\x94\x00\x3f\x00\x9e\x00\x43\x00\xa8\x00'\
b'\x45\x00\xb2\x00\x48\x00\xbc\x00\x4c\x00\xc6\x00\x4d\x00\xd0\x00'\
b'\x4f\x00\xda\x00\x50\x00\xe4\x00\x54\x00\xee\x00\x61\x00\xf8\x00'\
b'\x68\x00\x02\x01\x6c\x00\x0c\x01\x75\x00\x16\x01\x78\x00\x20\x01'\
b'\xb0\x00\x2a\x01'

_mvfont = memoryview(_font)
_mvsp = memoryview(_sparse)
ifb = lambda l : l[0] | (l[1] << 8)

def bs(lst, val):
    while True:
        m = (len(lst) & ~ 7) >> 1
        v = ifb(lst[m:])
        if v == val:
            return ifb(lst[m + 2:])
        if not m:
            return 0
        lst = lst[m:] if v < val else lst[:m]

def get_ch(ch):
    doff = bs(_mvsp, ord(ch))
    width = ifb(_mvfont[doff : ])

    next_offs = doff + 2 + ((width - 1)//8 + 1) * 8
    return _mvfont[doff + 2:next_offs], 8, width
 
